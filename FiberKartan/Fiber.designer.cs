#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FiberKartan
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="FiberDB")]
	public partial class FiberDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertImportError(ImportError instance);
    partial void UpdateImportError(ImportError instance);
    partial void DeleteImportError(ImportError instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertIncidentReport(IncidentReport instance);
    partial void UpdateIncidentReport(IncidentReport instance);
    partial void DeleteIncidentReport(IncidentReport instance);
    partial void InsertLine(Line instance);
    partial void UpdateLine(Line instance);
    partial void DeleteLine(Line instance);
    partial void InsertMap(Map instance);
    partial void UpdateMap(Map instance);
    partial void DeleteMap(Map instance);
    partial void InsertMapAccessInvitation(MapAccessInvitation instance);
    partial void UpdateMapAccessInvitation(MapAccessInvitation instance);
    partial void DeleteMapAccessInvitation(MapAccessInvitation instance);
    partial void InsertMapFile(MapFile instance);
    partial void UpdateMapFile(MapFile instance);
    partial void DeleteMapFile(MapFile instance);
    partial void InsertMapType(MapType instance);
    partial void UpdateMapType(MapType instance);
    partial void DeleteMapType(MapType instance);
    partial void InsertMapTypeAccessRight(MapTypeAccessRight instance);
    partial void UpdateMapTypeAccessRight(MapTypeAccessRight instance);
    partial void DeleteMapTypeAccessRight(MapTypeAccessRight instance);
    partial void InsertMarker(Marker instance);
    partial void UpdateMarker(Marker instance);
    partial void DeleteMarker(Marker instance);
    partial void InsertMarkerType(MarkerType instance);
    partial void UpdateMarkerType(MarkerType instance);
    partial void DeleteMarkerType(MarkerType instance);
    partial void InsertMunicipality(Municipality instance);
    partial void UpdateMunicipality(Municipality instance);
    partial void DeleteMunicipality(Municipality instance);
    partial void InsertNotificationMessage(NotificationMessage instance);
    partial void UpdateNotificationMessage(NotificationMessage instance);
    partial void DeleteNotificationMessage(NotificationMessage instance);
    partial void InsertRegion(Region instance);
    partial void UpdateRegion(Region instance);
    partial void DeleteRegion(Region instance);
    partial void InsertServiceCompany(ServiceCompany instance);
    partial void UpdateServiceCompany(ServiceCompany instance);
    partial void DeleteServiceCompany(ServiceCompany instance);
    #endregion
		
		public FiberDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["FiberDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public FiberDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FiberDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FiberDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FiberDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ImportError> ImportErrors
		{
			get
			{
				return this.GetTable<ImportError>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<IncidentReport> IncidentReports
		{
			get
			{
				return this.GetTable<IncidentReport>();
			}
		}
		
		public System.Data.Linq.Table<Line> Lines
		{
			get
			{
				return this.GetTable<Line>();
			}
		}
		
		public System.Data.Linq.Table<Map> Maps
		{
			get
			{
				return this.GetTable<Map>();
			}
		}
		
		public System.Data.Linq.Table<MapAccessInvitation> MapAccessInvitations
		{
			get
			{
				return this.GetTable<MapAccessInvitation>();
			}
		}
		
		public System.Data.Linq.Table<MapFile> MapFiles
		{
			get
			{
				return this.GetTable<MapFile>();
			}
		}
		
		public System.Data.Linq.Table<MapType> MapTypes
		{
			get
			{
				return this.GetTable<MapType>();
			}
		}
		
		public System.Data.Linq.Table<MapTypeAccessRight> MapTypeAccessRights
		{
			get
			{
				return this.GetTable<MapTypeAccessRight>();
			}
		}
		
		public System.Data.Linq.Table<Marker> Markers
		{
			get
			{
				return this.GetTable<Marker>();
			}
		}
		
		public System.Data.Linq.Table<MarkerType> MarkerTypes
		{
			get
			{
				return this.GetTable<MarkerType>();
			}
		}
		
		public System.Data.Linq.Table<Municipality> Municipalities
		{
			get
			{
				return this.GetTable<Municipality>();
			}
		}
		
		public System.Data.Linq.Table<NotificationMessage> NotificationMessages
		{
			get
			{
				return this.GetTable<NotificationMessage>();
			}
		}
		
		public System.Data.Linq.Table<Region> Regions
		{
			get
			{
				return this.GetTable<Region>();
			}
		}
		
		public System.Data.Linq.Table<ServiceCompany> ServiceCompanies
		{
			get
			{
				return this.GetTable<ServiceCompany>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteMapType")]
		public int DeleteMapType([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> mapTypeId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), mapTypeId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetRegionMaps")]
		public ISingleResult<GetRegionMapsResult> GetRegionMaps([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(10)")] string code)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), code);
			return ((ISingleResult<GetRegionMapsResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ImportErrors")]
	public partial class ImportError : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private int _MapTypeId;
		
		private System.DateTime _Date;
		
		private int _MergeVersion;
		
		private string _KML;
		
		private string _ErrorMessage;
		
		private string _StackTrace;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnMapTypeIdChanging(int value);
    partial void OnMapTypeIdChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnMergeVersionChanging(int value);
    partial void OnMergeVersionChanged();
    partial void OnKMLChanging(string value);
    partial void OnKMLChanged();
    partial void OnErrorMessageChanging(string value);
    partial void OnErrorMessageChanged();
    partial void OnStackTraceChanging(string value);
    partial void OnStackTraceChanged();
    #endregion
		
		public ImportError()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MapTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MapTypeId
		{
			get
			{
				return this._MapTypeId;
			}
			set
			{
				if ((this._MapTypeId != value))
				{
					this.OnMapTypeIdChanging(value);
					this.SendPropertyChanging();
					this._MapTypeId = value;
					this.SendPropertyChanged("MapTypeId");
					this.OnMapTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MergeVersion", DbType="Int NOT NULL")]
		public int MergeVersion
		{
			get
			{
				return this._MergeVersion;
			}
			set
			{
				if ((this._MergeVersion != value))
				{
					this.OnMergeVersionChanging(value);
					this.SendPropertyChanging();
					this._MergeVersion = value;
					this.SendPropertyChanged("MergeVersion");
					this.OnMergeVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KML", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string KML
		{
			get
			{
				return this._KML;
			}
			set
			{
				if ((this._KML != value))
				{
					this.OnKMLChanging(value);
					this.SendPropertyChanging();
					this._KML = value;
					this.SendPropertyChanged("KML");
					this.OnKMLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorMessage", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ErrorMessage
		{
			get
			{
				return this._ErrorMessage;
			}
			set
			{
				if ((this._ErrorMessage != value))
				{
					this.OnErrorMessageChanging(value);
					this.SendPropertyChanging();
					this._ErrorMessage = value;
					this.SendPropertyChanged("ErrorMessage");
					this.OnErrorMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StackTrace", DbType="NVarChar(MAX)")]
		public string StackTrace
		{
			get
			{
				return this._StackTrace;
			}
			set
			{
				if ((this._StackTrace != value))
				{
					this.OnStackTraceChanging(value);
					this.SendPropertyChanging();
					this._StackTrace = value;
					this.SendPropertyChanged("StackTrace");
					this.OnStackTraceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Username;
		
		private string _Password;
		
		private string _Description;
		
		private bool _IsDeleted;
		
		private System.DateTime _Created;
		
		private System.Nullable<System.DateTime> _LastLoggedOn;
		
		private System.Nullable<System.DateTime> _LastActivity;
		
		private bool _IsAdmin;
		
		private System.Nullable<int> _LastNotificationMessage;
		
		private EntitySet<IncidentReport> _IncidentReports;
		
		private EntitySet<Map> _Maps;
		
		private EntitySet<MapAccessInvitation> _MapAccessInvitations;
		
		private EntitySet<MapFile> _MapFiles;
		
		private EntitySet<MapType> _MapTypes;
		
		private EntitySet<MapTypeAccessRight> _MapTypeAccessRights;
		
		private EntitySet<NotificationMessage> _NotificationMessages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnLastLoggedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnLastLoggedOnChanged();
    partial void OnLastActivityChanging(System.Nullable<System.DateTime> value);
    partial void OnLastActivityChanged();
    partial void OnIsAdminChanging(bool value);
    partial void OnIsAdminChanged();
    partial void OnLastNotificationMessageChanging(System.Nullable<int> value);
    partial void OnLastNotificationMessageChanged();
    #endregion
		
		public User()
		{
			this._IncidentReports = new EntitySet<IncidentReport>(new Action<IncidentReport>(this.attach_IncidentReports), new Action<IncidentReport>(this.detach_IncidentReports));
			this._Maps = new EntitySet<Map>(new Action<Map>(this.attach_Maps), new Action<Map>(this.detach_Maps));
			this._MapAccessInvitations = new EntitySet<MapAccessInvitation>(new Action<MapAccessInvitation>(this.attach_MapAccessInvitations), new Action<MapAccessInvitation>(this.detach_MapAccessInvitations));
			this._MapFiles = new EntitySet<MapFile>(new Action<MapFile>(this.attach_MapFiles), new Action<MapFile>(this.detach_MapFiles));
			this._MapTypes = new EntitySet<MapType>(new Action<MapType>(this.attach_MapTypes), new Action<MapType>(this.detach_MapTypes));
			this._MapTypeAccessRights = new EntitySet<MapTypeAccessRight>(new Action<MapTypeAccessRight>(this.attach_MapTypeAccessRights), new Action<MapTypeAccessRight>(this.detach_MapTypeAccessRights));
			this._NotificationMessages = new EntitySet<NotificationMessage>(new Action<NotificationMessage>(this.attach_NotificationMessages), new Action<NotificationMessage>(this.detach_NotificationMessages));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(100)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(4000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLoggedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastLoggedOn
		{
			get
			{
				return this._LastLoggedOn;
			}
			set
			{
				if ((this._LastLoggedOn != value))
				{
					this.OnLastLoggedOnChanging(value);
					this.SendPropertyChanging();
					this._LastLoggedOn = value;
					this.SendPropertyChanged("LastLoggedOn");
					this.OnLastLoggedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastActivity", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastActivity
		{
			get
			{
				return this._LastActivity;
			}
			set
			{
				if ((this._LastActivity != value))
				{
					this.OnLastActivityChanging(value);
					this.SendPropertyChanging();
					this._LastActivity = value;
					this.SendPropertyChanged("LastActivity");
					this.OnLastActivityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAdmin", DbType="Bit NOT NULL")]
		public bool IsAdmin
		{
			get
			{
				return this._IsAdmin;
			}
			set
			{
				if ((this._IsAdmin != value))
				{
					this.OnIsAdminChanging(value);
					this.SendPropertyChanging();
					this._IsAdmin = value;
					this.SendPropertyChanged("IsAdmin");
					this.OnIsAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastNotificationMessage", DbType="Int")]
		public System.Nullable<int> LastNotificationMessage
		{
			get
			{
				return this._LastNotificationMessage;
			}
			set
			{
				if ((this._LastNotificationMessage != value))
				{
					this.OnLastNotificationMessageChanging(value);
					this.SendPropertyChanging();
					this._LastNotificationMessage = value;
					this.SendPropertyChanged("LastNotificationMessage");
					this.OnLastNotificationMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_IncidentReport", Storage="_IncidentReports", ThisKey="Id", OtherKey="CreatorId")]
		public EntitySet<IncidentReport> IncidentReports
		{
			get
			{
				return this._IncidentReports;
			}
			set
			{
				this._IncidentReports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Map", Storage="_Maps", ThisKey="Id", OtherKey="CreatorId")]
		public EntitySet<Map> Maps
		{
			get
			{
				return this._Maps;
			}
			set
			{
				this._Maps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MapAccessInvitation", Storage="_MapAccessInvitations", ThisKey="Id", OtherKey="InvitationSentBy")]
		public EntitySet<MapAccessInvitation> MapAccessInvitations
		{
			get
			{
				return this._MapAccessInvitations;
			}
			set
			{
				this._MapAccessInvitations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MapFile", Storage="_MapFiles", ThisKey="Id", OtherKey="CreatorId")]
		public EntitySet<MapFile> MapFiles
		{
			get
			{
				return this._MapFiles;
			}
			set
			{
				this._MapFiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MapType", Storage="_MapTypes", ThisKey="Id", OtherKey="CreatorId")]
		public EntitySet<MapType> MapTypes
		{
			get
			{
				return this._MapTypes;
			}
			set
			{
				this._MapTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MapTypeAccessRight", Storage="_MapTypeAccessRights", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<MapTypeAccessRight> MapTypeAccessRights
		{
			get
			{
				return this._MapTypeAccessRights;
			}
			set
			{
				this._MapTypeAccessRights.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_NotificationMessage", Storage="_NotificationMessages", ThisKey="Id", OtherKey="CreatorId")]
		public EntitySet<NotificationMessage> NotificationMessages
		{
			get
			{
				return this._NotificationMessages;
			}
			set
			{
				this._NotificationMessages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IncidentReports(IncidentReport entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_IncidentReports(IncidentReport entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Maps(Map entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Maps(Map entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_MapAccessInvitations(MapAccessInvitation entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_MapAccessInvitations(MapAccessInvitation entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_MapFiles(MapFile entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_MapFiles(MapFile entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_MapTypes(MapType entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_MapTypes(MapType entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_MapTypeAccessRights(MapTypeAccessRight entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_MapTypeAccessRights(MapTypeAccessRight entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_NotificationMessages(NotificationMessage entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_NotificationMessages(NotificationMessage entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IncidentReport")]
	public partial class IncidentReport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _MapTypeId;
		
		private int _MapVer;
		
		private int _CreatorId;
		
		private System.DateTime _Created;
		
		private int _ServiceCompanyId;
		
		private double _Latitude;
		
		private double _Longitude;
		
		private string _Estate;
		
		private string _Description;
		
		private int _ReportStatus;
		
		private EntityRef<User> _User;
		
		private EntityRef<Map> _Map;
		
		private EntityRef<ServiceCompany> _ServiceCompany;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMapTypeIdChanging(int value);
    partial void OnMapTypeIdChanged();
    partial void OnMapVerChanging(int value);
    partial void OnMapVerChanged();
    partial void OnCreatorIdChanging(int value);
    partial void OnCreatorIdChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnServiceCompanyIdChanging(int value);
    partial void OnServiceCompanyIdChanged();
    partial void OnLatitudeChanging(double value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(double value);
    partial void OnLongitudeChanged();
    partial void OnEstateChanging(string value);
    partial void OnEstateChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnReportStatusChanging(int value);
    partial void OnReportStatusChanged();
    #endregion
		
		public IncidentReport()
		{
			this._User = default(EntityRef<User>);
			this._Map = default(EntityRef<Map>);
			this._ServiceCompany = default(EntityRef<ServiceCompany>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MapTypeId", DbType="Int NOT NULL")]
		public int MapTypeId
		{
			get
			{
				return this._MapTypeId;
			}
			set
			{
				if ((this._MapTypeId != value))
				{
					if (this._Map.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMapTypeIdChanging(value);
					this.SendPropertyChanging();
					this._MapTypeId = value;
					this.SendPropertyChanged("MapTypeId");
					this.OnMapTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MapVer", DbType="Int NOT NULL")]
		public int MapVer
		{
			get
			{
				return this._MapVer;
			}
			set
			{
				if ((this._MapVer != value))
				{
					if (this._Map.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMapVerChanging(value);
					this.SendPropertyChanging();
					this._MapVer = value;
					this.SendPropertyChanged("MapVer");
					this.OnMapVerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatorId", DbType="Int NOT NULL")]
		public int CreatorId
		{
			get
			{
				return this._CreatorId;
			}
			set
			{
				if ((this._CreatorId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorIdChanging(value);
					this.SendPropertyChanging();
					this._CreatorId = value;
					this.SendPropertyChanged("CreatorId");
					this.OnCreatorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceCompanyId", DbType="Int NOT NULL")]
		public int ServiceCompanyId
		{
			get
			{
				return this._ServiceCompanyId;
			}
			set
			{
				if ((this._ServiceCompanyId != value))
				{
					if (this._ServiceCompany.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceCompanyId = value;
					this.SendPropertyChanged("ServiceCompanyId");
					this.OnServiceCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Float NOT NULL")]
		public double Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="Float NOT NULL")]
		public double Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Estate", DbType="NVarChar(200)")]
		public string Estate
		{
			get
			{
				return this._Estate;
			}
			set
			{
				if ((this._Estate != value))
				{
					this.OnEstateChanging(value);
					this.SendPropertyChanging();
					this._Estate = value;
					this.SendPropertyChanged("Estate");
					this.OnEstateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(2000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportStatus", DbType="Int NOT NULL")]
		public int ReportStatus
		{
			get
			{
				return this._ReportStatus;
			}
			set
			{
				if ((this._ReportStatus != value))
				{
					this.OnReportStatusChanging(value);
					this.SendPropertyChanging();
					this._ReportStatus = value;
					this.SendPropertyChanged("ReportStatus");
					this.OnReportStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_IncidentReport", Storage="_User", ThisKey="CreatorId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.IncidentReports.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.IncidentReports.Add(this);
						this._CreatorId = value.Id;
					}
					else
					{
						this._CreatorId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Map_IncidentReport", Storage="_Map", ThisKey="MapTypeId,MapVer", OtherKey="MapTypeId,Ver", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Map Map
		{
			get
			{
				return this._Map.Entity;
			}
			set
			{
				Map previousValue = this._Map.Entity;
				if (((previousValue != value) 
							|| (this._Map.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Map.Entity = null;
						previousValue.IncidentReports.Remove(this);
					}
					this._Map.Entity = value;
					if ((value != null))
					{
						value.IncidentReports.Add(this);
						this._MapTypeId = value.MapTypeId;
						this._MapVer = value.Ver;
					}
					else
					{
						this._MapTypeId = default(int);
						this._MapVer = default(int);
					}
					this.SendPropertyChanged("Map");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceCompany_IncidentReport", Storage="_ServiceCompany", ThisKey="ServiceCompanyId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ServiceCompany ServiceCompany
		{
			get
			{
				return this._ServiceCompany.Entity;
			}
			set
			{
				ServiceCompany previousValue = this._ServiceCompany.Entity;
				if (((previousValue != value) 
							|| (this._ServiceCompany.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceCompany.Entity = null;
						previousValue.IncidentReports.Remove(this);
					}
					this._ServiceCompany.Entity = value;
					if ((value != null))
					{
						value.IncidentReports.Add(this);
						this._ServiceCompanyId = value.Id;
					}
					else
					{
						this._ServiceCompanyId = default(int);
					}
					this.SendPropertyChanged("ServiceCompany");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Line")]
	public partial class Line : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _MapTypeId;
		
		private int _MapVer;
		
		private string _Name;
		
		private string _Description;
		
		private string _LineColor;
		
		private int _Width;
		
		private string _Coordinates;
		
		private int _Type;
		
		private int _Uid;
		
		private EntityRef<Map> _Map;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMapTypeIdChanging(int value);
    partial void OnMapTypeIdChanged();
    partial void OnMapVerChanging(int value);
    partial void OnMapVerChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnLineColorChanging(string value);
    partial void OnLineColorChanged();
    partial void OnWidthChanging(int value);
    partial void OnWidthChanged();
    partial void OnCoordinatesChanging(string value);
    partial void OnCoordinatesChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnUidChanging(int value);
    partial void OnUidChanged();
    #endregion
		
		public Line()
		{
			this._Map = default(EntityRef<Map>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MapTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MapTypeId
		{
			get
			{
				return this._MapTypeId;
			}
			set
			{
				if ((this._MapTypeId != value))
				{
					if (this._Map.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMapTypeIdChanging(value);
					this.SendPropertyChanging();
					this._MapTypeId = value;
					this.SendPropertyChanged("MapTypeId");
					this.OnMapTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MapVer", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MapVer
		{
			get
			{
				return this._MapVer;
			}
			set
			{
				if ((this._MapVer != value))
				{
					if (this._Map.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMapVerChanging(value);
					this.SendPropertyChanging();
					this._MapVer = value;
					this.SendPropertyChanged("MapVer");
					this.OnMapVerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(512)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineColor", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string LineColor
		{
			get
			{
				return this._LineColor;
			}
			set
			{
				if ((this._LineColor != value))
				{
					this.OnLineColorChanging(value);
					this.SendPropertyChanging();
					this._LineColor = value;
					this.SendPropertyChanged("LineColor");
					this.OnLineColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Width", DbType="Int NOT NULL")]
		public int Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Coordinates", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Coordinates
		{
			get
			{
				return this._Coordinates;
			}
			set
			{
				if ((this._Coordinates != value))
				{
					this.OnCoordinatesChanging(value);
					this.SendPropertyChanging();
					this._Coordinates = value;
					this.SendPropertyChanged("Coordinates");
					this.OnCoordinatesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uid", DbType="Int NOT NULL")]
		public int Uid
		{
			get
			{
				return this._Uid;
			}
			set
			{
				if ((this._Uid != value))
				{
					this.OnUidChanging(value);
					this.SendPropertyChanging();
					this._Uid = value;
					this.SendPropertyChanged("Uid");
					this.OnUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Map_Line", Storage="_Map", ThisKey="MapTypeId,MapVer", OtherKey="MapTypeId,Ver", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Map Map
		{
			get
			{
				return this._Map.Entity;
			}
			set
			{
				Map previousValue = this._Map.Entity;
				if (((previousValue != value) 
							|| (this._Map.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Map.Entity = null;
						previousValue.Lines.Remove(this);
					}
					this._Map.Entity = value;
					if ((value != null))
					{
						value.Lines.Add(this);
						this._MapTypeId = value.MapTypeId;
						this._MapVer = value.Ver;
					}
					else
					{
						this._MapTypeId = default(int);
						this._MapVer = default(int);
					}
					this.SendPropertyChanged("Map");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Map")]
	public partial class Map : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MapTypeId;
		
		private int _Ver;
		
		private string _SourceKML;
		
		private string _KML_Hash;
		
		private System.DateTime _Created;
		
		private int _Views;
		
		private System.Nullable<int> _PreviousVer;
		
		private int _CreatorId;
		
		private System.Nullable<System.DateTime> _Published;
		
		private string _Layers;
		
		private EntitySet<IncidentReport> _IncidentReports;
		
		private EntitySet<Line> _Lines;
		
		private EntitySet<Marker> _Markers;
		
		private EntitySet<Region> _Regions;
		
		private EntityRef<User> _User;
		
		private EntityRef<MapType> _MapType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMapTypeIdChanging(int value);
    partial void OnMapTypeIdChanged();
    partial void OnVerChanging(int value);
    partial void OnVerChanged();
    partial void OnSourceKMLChanging(string value);
    partial void OnSourceKMLChanged();
    partial void OnKML_HashChanging(string value);
    partial void OnKML_HashChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnViewsChanging(int value);
    partial void OnViewsChanged();
    partial void OnPreviousVerChanging(System.Nullable<int> value);
    partial void OnPreviousVerChanged();
    partial void OnCreatorIdChanging(int value);
    partial void OnCreatorIdChanged();
    partial void OnPublishedChanging(System.Nullable<System.DateTime> value);
    partial void OnPublishedChanged();
    partial void OnLayersChanging(string value);
    partial void OnLayersChanged();
    #endregion
		
		public Map()
		{
			this._IncidentReports = new EntitySet<IncidentReport>(new Action<IncidentReport>(this.attach_IncidentReports), new Action<IncidentReport>(this.detach_IncidentReports));
			this._Lines = new EntitySet<Line>(new Action<Line>(this.attach_Lines), new Action<Line>(this.detach_Lines));
			this._Markers = new EntitySet<Marker>(new Action<Marker>(this.attach_Markers), new Action<Marker>(this.detach_Markers));
			this._Regions = new EntitySet<Region>(new Action<Region>(this.attach_Regions), new Action<Region>(this.detach_Regions));
			this._User = default(EntityRef<User>);
			this._MapType = default(EntityRef<MapType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MapTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MapTypeId
		{
			get
			{
				return this._MapTypeId;
			}
			set
			{
				if ((this._MapTypeId != value))
				{
					if (this._MapType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMapTypeIdChanging(value);
					this.SendPropertyChanging();
					this._MapTypeId = value;
					this.SendPropertyChanged("MapTypeId");
					this.OnMapTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ver", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Ver
		{
			get
			{
				return this._Ver;
			}
			set
			{
				if ((this._Ver != value))
				{
					this.OnVerChanging(value);
					this.SendPropertyChanging();
					this._Ver = value;
					this.SendPropertyChanged("Ver");
					this.OnVerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceKML", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string SourceKML
		{
			get
			{
				return this._SourceKML;
			}
			set
			{
				if ((this._SourceKML != value))
				{
					this.OnSourceKMLChanging(value);
					this.SendPropertyChanging();
					this._SourceKML = value;
					this.SendPropertyChanged("SourceKML");
					this.OnSourceKMLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KML_Hash", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string KML_Hash
		{
			get
			{
				return this._KML_Hash;
			}
			set
			{
				if ((this._KML_Hash != value))
				{
					this.OnKML_HashChanging(value);
					this.SendPropertyChanging();
					this._KML_Hash = value;
					this.SendPropertyChanged("KML_Hash");
					this.OnKML_HashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Views", DbType="Int NOT NULL")]
		public int Views
		{
			get
			{
				return this._Views;
			}
			set
			{
				if ((this._Views != value))
				{
					this.OnViewsChanging(value);
					this.SendPropertyChanging();
					this._Views = value;
					this.SendPropertyChanged("Views");
					this.OnViewsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreviousVer", DbType="Int")]
		public System.Nullable<int> PreviousVer
		{
			get
			{
				return this._PreviousVer;
			}
			set
			{
				if ((this._PreviousVer != value))
				{
					this.OnPreviousVerChanging(value);
					this.SendPropertyChanging();
					this._PreviousVer = value;
					this.SendPropertyChanged("PreviousVer");
					this.OnPreviousVerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatorId", DbType="Int NOT NULL")]
		public int CreatorId
		{
			get
			{
				return this._CreatorId;
			}
			set
			{
				if ((this._CreatorId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorIdChanging(value);
					this.SendPropertyChanging();
					this._CreatorId = value;
					this.SendPropertyChanged("CreatorId");
					this.OnCreatorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Published", DbType="DateTime")]
		public System.Nullable<System.DateTime> Published
		{
			get
			{
				return this._Published;
			}
			set
			{
				if ((this._Published != value))
				{
					this.OnPublishedChanging(value);
					this.SendPropertyChanging();
					this._Published = value;
					this.SendPropertyChanged("Published");
					this.OnPublishedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Layers", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Layers
		{
			get
			{
				return this._Layers;
			}
			set
			{
				if ((this._Layers != value))
				{
					this.OnLayersChanging(value);
					this.SendPropertyChanging();
					this._Layers = value;
					this.SendPropertyChanged("Layers");
					this.OnLayersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Map_IncidentReport", Storage="_IncidentReports", ThisKey="MapTypeId,Ver", OtherKey="MapTypeId,MapVer")]
		public EntitySet<IncidentReport> IncidentReports
		{
			get
			{
				return this._IncidentReports;
			}
			set
			{
				this._IncidentReports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Map_Line", Storage="_Lines", ThisKey="MapTypeId,Ver", OtherKey="MapTypeId,MapVer")]
		public EntitySet<Line> Lines
		{
			get
			{
				return this._Lines;
			}
			set
			{
				this._Lines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Map_Marker", Storage="_Markers", ThisKey="MapTypeId,Ver", OtherKey="MapTypeId,MapVer")]
		public EntitySet<Marker> Markers
		{
			get
			{
				return this._Markers;
			}
			set
			{
				this._Markers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Map_Region", Storage="_Regions", ThisKey="MapTypeId,Ver", OtherKey="MapTypeId,MapVer")]
		public EntitySet<Region> Regions
		{
			get
			{
				return this._Regions;
			}
			set
			{
				this._Regions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Map", Storage="_User", ThisKey="CreatorId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Maps.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Maps.Add(this);
						this._CreatorId = value.Id;
					}
					else
					{
						this._CreatorId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapType_Map", Storage="_MapType", ThisKey="MapTypeId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MapType MapType
		{
			get
			{
				return this._MapType.Entity;
			}
			set
			{
				MapType previousValue = this._MapType.Entity;
				if (((previousValue != value) 
							|| (this._MapType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MapType.Entity = null;
						previousValue.Maps.Remove(this);
					}
					this._MapType.Entity = value;
					if ((value != null))
					{
						value.Maps.Add(this);
						this._MapTypeId = value.Id;
					}
					else
					{
						this._MapTypeId = default(int);
					}
					this.SendPropertyChanged("MapType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IncidentReports(IncidentReport entity)
		{
			this.SendPropertyChanging();
			entity.Map = this;
		}
		
		private void detach_IncidentReports(IncidentReport entity)
		{
			this.SendPropertyChanging();
			entity.Map = null;
		}
		
		private void attach_Lines(Line entity)
		{
			this.SendPropertyChanging();
			entity.Map = this;
		}
		
		private void detach_Lines(Line entity)
		{
			this.SendPropertyChanging();
			entity.Map = null;
		}
		
		private void attach_Markers(Marker entity)
		{
			this.SendPropertyChanging();
			entity.Map = this;
		}
		
		private void detach_Markers(Marker entity)
		{
			this.SendPropertyChanging();
			entity.Map = null;
		}
		
		private void attach_Regions(Region entity)
		{
			this.SendPropertyChanging();
			entity.Map = this;
		}
		
		private void detach_Regions(Region entity)
		{
			this.SendPropertyChanging();
			entity.Map = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MapAccessInvitation")]
	public partial class MapAccessInvitation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _MapTypeId;
		
		private int _AccessRight;
		
		private string _Email;
		
		private string _InvitationCode;
		
		private System.DateTime _InvitationSent;
		
		private int _InvitationSentBy;
		
		private EntityRef<User> _User;
		
		private EntityRef<MapType> _MapType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMapTypeIdChanging(int value);
    partial void OnMapTypeIdChanged();
    partial void OnAccessRightChanging(int value);
    partial void OnAccessRightChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnInvitationCodeChanging(string value);
    partial void OnInvitationCodeChanged();
    partial void OnInvitationSentChanging(System.DateTime value);
    partial void OnInvitationSentChanged();
    partial void OnInvitationSentByChanging(int value);
    partial void OnInvitationSentByChanged();
    #endregion
		
		public MapAccessInvitation()
		{
			this._User = default(EntityRef<User>);
			this._MapType = default(EntityRef<MapType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MapTypeId", DbType="Int NOT NULL")]
		public int MapTypeId
		{
			get
			{
				return this._MapTypeId;
			}
			set
			{
				if ((this._MapTypeId != value))
				{
					if (this._MapType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMapTypeIdChanging(value);
					this.SendPropertyChanging();
					this._MapTypeId = value;
					this.SendPropertyChanged("MapTypeId");
					this.OnMapTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessRight", DbType="Int NOT NULL")]
		public int AccessRight
		{
			get
			{
				return this._AccessRight;
			}
			set
			{
				if ((this._AccessRight != value))
				{
					this.OnAccessRightChanging(value);
					this.SendPropertyChanging();
					this._AccessRight = value;
					this.SendPropertyChanged("AccessRight");
					this.OnAccessRightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvitationCode", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string InvitationCode
		{
			get
			{
				return this._InvitationCode;
			}
			set
			{
				if ((this._InvitationCode != value))
				{
					this.OnInvitationCodeChanging(value);
					this.SendPropertyChanging();
					this._InvitationCode = value;
					this.SendPropertyChanged("InvitationCode");
					this.OnInvitationCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvitationSent", DbType="DateTime NOT NULL")]
		public System.DateTime InvitationSent
		{
			get
			{
				return this._InvitationSent;
			}
			set
			{
				if ((this._InvitationSent != value))
				{
					this.OnInvitationSentChanging(value);
					this.SendPropertyChanging();
					this._InvitationSent = value;
					this.SendPropertyChanged("InvitationSent");
					this.OnInvitationSentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvitationSentBy", DbType="Int NOT NULL")]
		public int InvitationSentBy
		{
			get
			{
				return this._InvitationSentBy;
			}
			set
			{
				if ((this._InvitationSentBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvitationSentByChanging(value);
					this.SendPropertyChanging();
					this._InvitationSentBy = value;
					this.SendPropertyChanged("InvitationSentBy");
					this.OnInvitationSentByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MapAccessInvitation", Storage="_User", ThisKey="InvitationSentBy", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.MapAccessInvitations.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.MapAccessInvitations.Add(this);
						this._InvitationSentBy = value.Id;
					}
					else
					{
						this._InvitationSentBy = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapType_MapAccessInvitation", Storage="_MapType", ThisKey="MapTypeId", OtherKey="Id", IsForeignKey=true)]
		public MapType MapType
		{
			get
			{
				return this._MapType.Entity;
			}
			set
			{
				MapType previousValue = this._MapType.Entity;
				if (((previousValue != value) 
							|| (this._MapType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MapType.Entity = null;
						previousValue.MapAccessInvitations.Remove(this);
					}
					this._MapType.Entity = value;
					if ((value != null))
					{
						value.MapAccessInvitations.Add(this);
						this._MapTypeId = value.Id;
					}
					else
					{
						this._MapTypeId = default(int);
					}
					this.SendPropertyChanged("MapType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MapFiles")]
	public partial class MapFile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private int _MapTypeId;
		
		private int _CreatorId;
		
		private System.DateTime _Created;
		
		private System.Data.Linq.Binary _MapData;
		
		private EntityRef<User> _User;
		
		private EntityRef<MapType> _MapType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnMapTypeIdChanging(int value);
    partial void OnMapTypeIdChanged();
    partial void OnCreatorIdChanging(int value);
    partial void OnCreatorIdChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnMapDataChanging(System.Data.Linq.Binary value);
    partial void OnMapDataChanged();
    #endregion
		
		public MapFile()
		{
			this._User = default(EntityRef<User>);
			this._MapType = default(EntityRef<MapType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MapTypeId", DbType="Int NOT NULL")]
		public int MapTypeId
		{
			get
			{
				return this._MapTypeId;
			}
			set
			{
				if ((this._MapTypeId != value))
				{
					if (this._MapType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMapTypeIdChanging(value);
					this.SendPropertyChanging();
					this._MapTypeId = value;
					this.SendPropertyChanged("MapTypeId");
					this.OnMapTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatorId", DbType="Int NOT NULL")]
		public int CreatorId
		{
			get
			{
				return this._CreatorId;
			}
			set
			{
				if ((this._CreatorId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorIdChanging(value);
					this.SendPropertyChanging();
					this._CreatorId = value;
					this.SendPropertyChanged("CreatorId");
					this.OnCreatorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MapData", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary MapData
		{
			get
			{
				return this._MapData;
			}
			set
			{
				if ((this._MapData != value))
				{
					this.OnMapDataChanging(value);
					this.SendPropertyChanging();
					this._MapData = value;
					this.SendPropertyChanged("MapData");
					this.OnMapDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MapFile", Storage="_User", ThisKey="CreatorId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.MapFiles.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.MapFiles.Add(this);
						this._CreatorId = value.Id;
					}
					else
					{
						this._CreatorId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapType_MapFile", Storage="_MapType", ThisKey="MapTypeId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MapType MapType
		{
			get
			{
				return this._MapType.Entity;
			}
			set
			{
				MapType previousValue = this._MapType.Entity;
				if (((previousValue != value) 
							|| (this._MapType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MapType.Entity = null;
						previousValue.MapFiles.Remove(this);
					}
					this._MapType.Entity = value;
					if ((value != null))
					{
						value.MapFiles.Add(this);
						this._MapTypeId = value.Id;
					}
					else
					{
						this._MapTypeId = default(int);
					}
					this.SendPropertyChanged("MapType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MapType")]
	public partial class MapType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CreatorId;
		
		private string _Title;
		
		private string _WelcomeMessage;
		
		private int _ViewSettings;
		
		private string _MunicipalityCode;
		
		private System.Nullable<int> _ServiceCompanyId;
		
		private EntitySet<Map> _Maps;
		
		private EntitySet<MapAccessInvitation> _MapAccessInvitations;
		
		private EntitySet<MapFile> _MapFiles;
		
		private EntitySet<MapTypeAccessRight> _MapTypeAccessRights;
		
		private EntityRef<User> _User;
		
		private EntityRef<Municipality> _Municipality;
		
		private EntityRef<ServiceCompany> _ServiceCompany;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCreatorIdChanging(int value);
    partial void OnCreatorIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnWelcomeMessageChanging(string value);
    partial void OnWelcomeMessageChanged();
    partial void OnViewSettingsChanging(int value);
    partial void OnViewSettingsChanged();
    partial void OnMunicipalityCodeChanging(string value);
    partial void OnMunicipalityCodeChanged();
    partial void OnServiceCompanyIdChanging(System.Nullable<int> value);
    partial void OnServiceCompanyIdChanged();
    #endregion
		
		public MapType()
		{
			this._Maps = new EntitySet<Map>(new Action<Map>(this.attach_Maps), new Action<Map>(this.detach_Maps));
			this._MapAccessInvitations = new EntitySet<MapAccessInvitation>(new Action<MapAccessInvitation>(this.attach_MapAccessInvitations), new Action<MapAccessInvitation>(this.detach_MapAccessInvitations));
			this._MapFiles = new EntitySet<MapFile>(new Action<MapFile>(this.attach_MapFiles), new Action<MapFile>(this.detach_MapFiles));
			this._MapTypeAccessRights = new EntitySet<MapTypeAccessRight>(new Action<MapTypeAccessRight>(this.attach_MapTypeAccessRights), new Action<MapTypeAccessRight>(this.detach_MapTypeAccessRights));
			this._User = default(EntityRef<User>);
			this._Municipality = default(EntityRef<Municipality>);
			this._ServiceCompany = default(EntityRef<ServiceCompany>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatorId", DbType="Int NOT NULL")]
		public int CreatorId
		{
			get
			{
				return this._CreatorId;
			}
			set
			{
				if ((this._CreatorId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorIdChanging(value);
					this.SendPropertyChanging();
					this._CreatorId = value;
					this.SendPropertyChanged("CreatorId");
					this.OnCreatorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WelcomeMessage", DbType="NVarChar(MAX)")]
		public string WelcomeMessage
		{
			get
			{
				return this._WelcomeMessage;
			}
			set
			{
				if ((this._WelcomeMessage != value))
				{
					this.OnWelcomeMessageChanging(value);
					this.SendPropertyChanging();
					this._WelcomeMessage = value;
					this.SendPropertyChanged("WelcomeMessage");
					this.OnWelcomeMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ViewSettings", DbType="Int NOT NULL")]
		public int ViewSettings
		{
			get
			{
				return this._ViewSettings;
			}
			set
			{
				if ((this._ViewSettings != value))
				{
					this.OnViewSettingsChanging(value);
					this.SendPropertyChanging();
					this._ViewSettings = value;
					this.SendPropertyChanged("ViewSettings");
					this.OnViewSettingsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MunicipalityCode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string MunicipalityCode
		{
			get
			{
				return this._MunicipalityCode;
			}
			set
			{
				if ((this._MunicipalityCode != value))
				{
					if (this._Municipality.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMunicipalityCodeChanging(value);
					this.SendPropertyChanging();
					this._MunicipalityCode = value;
					this.SendPropertyChanged("MunicipalityCode");
					this.OnMunicipalityCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceCompanyId", DbType="Int")]
		public System.Nullable<int> ServiceCompanyId
		{
			get
			{
				return this._ServiceCompanyId;
			}
			set
			{
				if ((this._ServiceCompanyId != value))
				{
					if (this._ServiceCompany.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceCompanyId = value;
					this.SendPropertyChanged("ServiceCompanyId");
					this.OnServiceCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapType_Map", Storage="_Maps", ThisKey="Id", OtherKey="MapTypeId")]
		public EntitySet<Map> Maps
		{
			get
			{
				return this._Maps;
			}
			set
			{
				this._Maps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapType_MapAccessInvitation", Storage="_MapAccessInvitations", ThisKey="Id", OtherKey="MapTypeId")]
		public EntitySet<MapAccessInvitation> MapAccessInvitations
		{
			get
			{
				return this._MapAccessInvitations;
			}
			set
			{
				this._MapAccessInvitations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapType_MapFile", Storage="_MapFiles", ThisKey="Id", OtherKey="MapTypeId")]
		public EntitySet<MapFile> MapFiles
		{
			get
			{
				return this._MapFiles;
			}
			set
			{
				this._MapFiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapType_MapTypeAccessRight", Storage="_MapTypeAccessRights", ThisKey="Id", OtherKey="MapTypeId")]
		public EntitySet<MapTypeAccessRight> MapTypeAccessRights
		{
			get
			{
				return this._MapTypeAccessRights;
			}
			set
			{
				this._MapTypeAccessRights.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MapType", Storage="_User", ThisKey="CreatorId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.MapTypes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.MapTypes.Add(this);
						this._CreatorId = value.Id;
					}
					else
					{
						this._CreatorId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Municipality_MapType", Storage="_Municipality", ThisKey="MunicipalityCode", OtherKey="Code", IsForeignKey=true)]
		public Municipality Municipality
		{
			get
			{
				return this._Municipality.Entity;
			}
			set
			{
				Municipality previousValue = this._Municipality.Entity;
				if (((previousValue != value) 
							|| (this._Municipality.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Municipality.Entity = null;
						previousValue.MapTypes.Remove(this);
					}
					this._Municipality.Entity = value;
					if ((value != null))
					{
						value.MapTypes.Add(this);
						this._MunicipalityCode = value.Code;
					}
					else
					{
						this._MunicipalityCode = default(string);
					}
					this.SendPropertyChanged("Municipality");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceCompany_MapType", Storage="_ServiceCompany", ThisKey="ServiceCompanyId", OtherKey="Id", IsForeignKey=true)]
		public ServiceCompany ServiceCompany
		{
			get
			{
				return this._ServiceCompany.Entity;
			}
			set
			{
				ServiceCompany previousValue = this._ServiceCompany.Entity;
				if (((previousValue != value) 
							|| (this._ServiceCompany.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceCompany.Entity = null;
						previousValue.MapTypes.Remove(this);
					}
					this._ServiceCompany.Entity = value;
					if ((value != null))
					{
						value.MapTypes.Add(this);
						this._ServiceCompanyId = value.Id;
					}
					else
					{
						this._ServiceCompanyId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ServiceCompany");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Maps(Map entity)
		{
			this.SendPropertyChanging();
			entity.MapType = this;
		}
		
		private void detach_Maps(Map entity)
		{
			this.SendPropertyChanging();
			entity.MapType = null;
		}
		
		private void attach_MapAccessInvitations(MapAccessInvitation entity)
		{
			this.SendPropertyChanging();
			entity.MapType = this;
		}
		
		private void detach_MapAccessInvitations(MapAccessInvitation entity)
		{
			this.SendPropertyChanging();
			entity.MapType = null;
		}
		
		private void attach_MapFiles(MapFile entity)
		{
			this.SendPropertyChanging();
			entity.MapType = this;
		}
		
		private void detach_MapFiles(MapFile entity)
		{
			this.SendPropertyChanging();
			entity.MapType = null;
		}
		
		private void attach_MapTypeAccessRights(MapTypeAccessRight entity)
		{
			this.SendPropertyChanging();
			entity.MapType = this;
		}
		
		private void detach_MapTypeAccessRights(MapTypeAccessRight entity)
		{
			this.SendPropertyChanging();
			entity.MapType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MapTypeAccessRight")]
	public partial class MapTypeAccessRight : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private int _MapTypeId;
		
		private int _AccessRight;
		
		private bool _EmailSubscribeChanges;
		
		private EntityRef<MapType> _MapType;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnMapTypeIdChanging(int value);
    partial void OnMapTypeIdChanged();
    partial void OnAccessRightChanging(int value);
    partial void OnAccessRightChanged();
    partial void OnEmailSubscribeChangesChanging(bool value);
    partial void OnEmailSubscribeChangesChanged();
    #endregion
		
		public MapTypeAccessRight()
		{
			this._MapType = default(EntityRef<MapType>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MapTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MapTypeId
		{
			get
			{
				return this._MapTypeId;
			}
			set
			{
				if ((this._MapTypeId != value))
				{
					if (this._MapType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMapTypeIdChanging(value);
					this.SendPropertyChanging();
					this._MapTypeId = value;
					this.SendPropertyChanged("MapTypeId");
					this.OnMapTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessRight", DbType="Int NOT NULL")]
		public int AccessRight
		{
			get
			{
				return this._AccessRight;
			}
			set
			{
				if ((this._AccessRight != value))
				{
					this.OnAccessRightChanging(value);
					this.SendPropertyChanging();
					this._AccessRight = value;
					this.SendPropertyChanged("AccessRight");
					this.OnAccessRightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailSubscribeChanges", DbType="Bit NOT NULL")]
		public bool EmailSubscribeChanges
		{
			get
			{
				return this._EmailSubscribeChanges;
			}
			set
			{
				if ((this._EmailSubscribeChanges != value))
				{
					this.OnEmailSubscribeChangesChanging(value);
					this.SendPropertyChanging();
					this._EmailSubscribeChanges = value;
					this.SendPropertyChanged("EmailSubscribeChanges");
					this.OnEmailSubscribeChangesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapType_MapTypeAccessRight", Storage="_MapType", ThisKey="MapTypeId", OtherKey="Id", IsForeignKey=true)]
		public MapType MapType
		{
			get
			{
				return this._MapType.Entity;
			}
			set
			{
				MapType previousValue = this._MapType.Entity;
				if (((previousValue != value) 
							|| (this._MapType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MapType.Entity = null;
						previousValue.MapTypeAccessRights.Remove(this);
					}
					this._MapType.Entity = value;
					if ((value != null))
					{
						value.MapTypeAccessRights.Add(this);
						this._MapTypeId = value.Id;
					}
					else
					{
						this._MapTypeId = default(int);
					}
					this.SendPropertyChanged("MapType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MapTypeAccessRight", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.MapTypeAccessRights.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.MapTypeAccessRights.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Marker")]
	public partial class Marker : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _MapTypeId;
		
		private int _MapVer;
		
		private int _MarkerTypeId;
		
		private string _Name;
		
		private string _Description;
		
		private double _Latitude;
		
		private double _Longitude;
		
		private int _Settings;
		
		private string _OptionalInfo;
		
		private int _Uid;
		
		private EntityRef<Map> _Map;
		
		private EntityRef<MarkerType> _MarkerType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMapTypeIdChanging(int value);
    partial void OnMapTypeIdChanged();
    partial void OnMapVerChanging(int value);
    partial void OnMapVerChanged();
    partial void OnMarkerTypeIdChanging(int value);
    partial void OnMarkerTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnLatitudeChanging(double value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(double value);
    partial void OnLongitudeChanged();
    partial void OnSettingsChanging(int value);
    partial void OnSettingsChanged();
    partial void OnOptionalInfoChanging(string value);
    partial void OnOptionalInfoChanged();
    partial void OnUidChanging(int value);
    partial void OnUidChanged();
    #endregion
		
		public Marker()
		{
			this._Map = default(EntityRef<Map>);
			this._MarkerType = default(EntityRef<MarkerType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MapTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MapTypeId
		{
			get
			{
				return this._MapTypeId;
			}
			set
			{
				if ((this._MapTypeId != value))
				{
					if (this._Map.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMapTypeIdChanging(value);
					this.SendPropertyChanging();
					this._MapTypeId = value;
					this.SendPropertyChanged("MapTypeId");
					this.OnMapTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MapVer", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MapVer
		{
			get
			{
				return this._MapVer;
			}
			set
			{
				if ((this._MapVer != value))
				{
					if (this._Map.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMapVerChanging(value);
					this.SendPropertyChanging();
					this._MapVer = value;
					this.SendPropertyChanged("MapVer");
					this.OnMapVerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarkerTypeId", DbType="Int NOT NULL")]
		public int MarkerTypeId
		{
			get
			{
				return this._MarkerTypeId;
			}
			set
			{
				if ((this._MarkerTypeId != value))
				{
					if (this._MarkerType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMarkerTypeIdChanging(value);
					this.SendPropertyChanging();
					this._MarkerTypeId = value;
					this.SendPropertyChanged("MarkerTypeId");
					this.OnMarkerTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(512)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Float NOT NULL")]
		public double Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="Float NOT NULL")]
		public double Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Settings", DbType="Int NOT NULL")]
		public int Settings
		{
			get
			{
				return this._Settings;
			}
			set
			{
				if ((this._Settings != value))
				{
					this.OnSettingsChanging(value);
					this.SendPropertyChanging();
					this._Settings = value;
					this.SendPropertyChanged("Settings");
					this.OnSettingsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OptionalInfo", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string OptionalInfo
		{
			get
			{
				return this._OptionalInfo;
			}
			set
			{
				if ((this._OptionalInfo != value))
				{
					this.OnOptionalInfoChanging(value);
					this.SendPropertyChanging();
					this._OptionalInfo = value;
					this.SendPropertyChanged("OptionalInfo");
					this.OnOptionalInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uid", DbType="Int NOT NULL")]
		public int Uid
		{
			get
			{
				return this._Uid;
			}
			set
			{
				if ((this._Uid != value))
				{
					this.OnUidChanging(value);
					this.SendPropertyChanging();
					this._Uid = value;
					this.SendPropertyChanged("Uid");
					this.OnUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Map_Marker", Storage="_Map", ThisKey="MapTypeId,MapVer", OtherKey="MapTypeId,Ver", IsForeignKey=true)]
		public Map Map
		{
			get
			{
				return this._Map.Entity;
			}
			set
			{
				Map previousValue = this._Map.Entity;
				if (((previousValue != value) 
							|| (this._Map.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Map.Entity = null;
						previousValue.Markers.Remove(this);
					}
					this._Map.Entity = value;
					if ((value != null))
					{
						value.Markers.Add(this);
						this._MapTypeId = value.MapTypeId;
						this._MapVer = value.Ver;
					}
					else
					{
						this._MapTypeId = default(int);
						this._MapVer = default(int);
					}
					this.SendPropertyChanged("Map");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MarkerType_Marker", Storage="_MarkerType", ThisKey="MarkerTypeId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MarkerType MarkerType
		{
			get
			{
				return this._MarkerType.Entity;
			}
			set
			{
				MarkerType previousValue = this._MarkerType.Entity;
				if (((previousValue != value) 
							|| (this._MarkerType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MarkerType.Entity = null;
						previousValue.Markers.Remove(this);
					}
					this._MarkerType.Entity = value;
					if ((value != null))
					{
						value.Markers.Add(this);
						this._MarkerTypeId = value.Id;
					}
					else
					{
						this._MarkerTypeId = default(int);
					}
					this.SendPropertyChanged("MarkerType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MarkerType")]
	public partial class MarkerType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _SourceIcon;
		
		private string _DestIcon;
		
		private string _Description;
		
		private EntitySet<Marker> _Markers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSourceIconChanging(string value);
    partial void OnSourceIconChanged();
    partial void OnDestIconChanging(string value);
    partial void OnDestIconChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public MarkerType()
		{
			this._Markers = new EntitySet<Marker>(new Action<Marker>(this.attach_Markers), new Action<Marker>(this.detach_Markers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceIcon", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string SourceIcon
		{
			get
			{
				return this._SourceIcon;
			}
			set
			{
				if ((this._SourceIcon != value))
				{
					this.OnSourceIconChanging(value);
					this.SendPropertyChanging();
					this._SourceIcon = value;
					this.SendPropertyChanged("SourceIcon");
					this.OnSourceIconChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DestIcon", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string DestIcon
		{
			get
			{
				return this._DestIcon;
			}
			set
			{
				if ((this._DestIcon != value))
				{
					this.OnDestIconChanging(value);
					this.SendPropertyChanging();
					this._DestIcon = value;
					this.SendPropertyChanged("DestIcon");
					this.OnDestIconChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MarkerType_Marker", Storage="_Markers", ThisKey="Id", OtherKey="MarkerTypeId")]
		public EntitySet<Marker> Markers
		{
			get
			{
				return this._Markers;
			}
			set
			{
				this._Markers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Markers(Marker entity)
		{
			this.SendPropertyChanging();
			entity.MarkerType = this;
		}
		
		private void detach_Markers(Marker entity)
		{
			this.SendPropertyChanging();
			entity.MarkerType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Municipality")]
	public partial class Municipality : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Code;
		
		private string _Name;
		
		private string _Referencesystem;
		
		private string _CenterLatitude;
		
		private string _CenterLongitude;
		
		private EntitySet<MapType> _MapTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnReferencesystemChanging(string value);
    partial void OnReferencesystemChanged();
    partial void OnCenterLatitudeChanging(string value);
    partial void OnCenterLatitudeChanged();
    partial void OnCenterLongitudeChanging(string value);
    partial void OnCenterLongitudeChanged();
    #endregion
		
		public Municipality()
		{
			this._MapTypes = new EntitySet<MapType>(new Action<MapType>(this.attach_MapTypes), new Action<MapType>(this.detach_MapTypes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Referencesystem", DbType="VarChar(50)")]
		public string Referencesystem
		{
			get
			{
				return this._Referencesystem;
			}
			set
			{
				if ((this._Referencesystem != value))
				{
					this.OnReferencesystemChanging(value);
					this.SendPropertyChanging();
					this._Referencesystem = value;
					this.SendPropertyChanged("Referencesystem");
					this.OnReferencesystemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterLatitude", DbType="VarChar(50)")]
		public string CenterLatitude
		{
			get
			{
				return this._CenterLatitude;
			}
			set
			{
				if ((this._CenterLatitude != value))
				{
					this.OnCenterLatitudeChanging(value);
					this.SendPropertyChanging();
					this._CenterLatitude = value;
					this.SendPropertyChanged("CenterLatitude");
					this.OnCenterLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterLongitude", DbType="VarChar(50)")]
		public string CenterLongitude
		{
			get
			{
				return this._CenterLongitude;
			}
			set
			{
				if ((this._CenterLongitude != value))
				{
					this.OnCenterLongitudeChanging(value);
					this.SendPropertyChanging();
					this._CenterLongitude = value;
					this.SendPropertyChanged("CenterLongitude");
					this.OnCenterLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Municipality_MapType", Storage="_MapTypes", ThisKey="Code", OtherKey="MunicipalityCode")]
		public EntitySet<MapType> MapTypes
		{
			get
			{
				return this._MapTypes;
			}
			set
			{
				this._MapTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MapTypes(MapType entity)
		{
			this.SendPropertyChanging();
			entity.Municipality = this;
		}
		
		private void detach_MapTypes(MapType entity)
		{
			this.SendPropertyChanging();
			entity.Municipality = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NotificationMessage")]
	public partial class NotificationMessage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Title;
		
		private string _Body;
		
		private System.DateTime _Created;
		
		private int _CreatorId;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnCreatorIdChanging(int value);
    partial void OnCreatorIdChanged();
    #endregion
		
		public NotificationMessage()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Body", DbType="NVarChar(4000)")]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatorId", DbType="Int NOT NULL")]
		public int CreatorId
		{
			get
			{
				return this._CreatorId;
			}
			set
			{
				if ((this._CreatorId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorIdChanging(value);
					this.SendPropertyChanging();
					this._CreatorId = value;
					this.SendPropertyChanged("CreatorId");
					this.OnCreatorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_NotificationMessage", Storage="_User", ThisKey="CreatorId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.NotificationMessages.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.NotificationMessages.Add(this);
						this._CreatorId = value.Id;
					}
					else
					{
						this._CreatorId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Region")]
	public partial class Region : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _MapTypeId;
		
		private int _MapVer;
		
		private string _Name;
		
		private string _Description;
		
		private string _FillColor;
		
		private string _LineColor;
		
		private string _Coordinates;
		
		private int _Uid;
		
		private EntityRef<Map> _Map;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMapTypeIdChanging(int value);
    partial void OnMapTypeIdChanged();
    partial void OnMapVerChanging(int value);
    partial void OnMapVerChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnFillColorChanging(string value);
    partial void OnFillColorChanged();
    partial void OnLineColorChanging(string value);
    partial void OnLineColorChanged();
    partial void OnCoordinatesChanging(string value);
    partial void OnCoordinatesChanged();
    partial void OnUidChanging(int value);
    partial void OnUidChanged();
    #endregion
		
		public Region()
		{
			this._Map = default(EntityRef<Map>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MapTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MapTypeId
		{
			get
			{
				return this._MapTypeId;
			}
			set
			{
				if ((this._MapTypeId != value))
				{
					if (this._Map.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMapTypeIdChanging(value);
					this.SendPropertyChanging();
					this._MapTypeId = value;
					this.SendPropertyChanged("MapTypeId");
					this.OnMapTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MapVer", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MapVer
		{
			get
			{
				return this._MapVer;
			}
			set
			{
				if ((this._MapVer != value))
				{
					if (this._Map.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMapVerChanging(value);
					this.SendPropertyChanging();
					this._MapVer = value;
					this.SendPropertyChanged("MapVer");
					this.OnMapVerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(512)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FillColor", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string FillColor
		{
			get
			{
				return this._FillColor;
			}
			set
			{
				if ((this._FillColor != value))
				{
					this.OnFillColorChanging(value);
					this.SendPropertyChanging();
					this._FillColor = value;
					this.SendPropertyChanged("FillColor");
					this.OnFillColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineColor", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string LineColor
		{
			get
			{
				return this._LineColor;
			}
			set
			{
				if ((this._LineColor != value))
				{
					this.OnLineColorChanging(value);
					this.SendPropertyChanging();
					this._LineColor = value;
					this.SendPropertyChanged("LineColor");
					this.OnLineColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Coordinates", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Coordinates
		{
			get
			{
				return this._Coordinates;
			}
			set
			{
				if ((this._Coordinates != value))
				{
					this.OnCoordinatesChanging(value);
					this.SendPropertyChanging();
					this._Coordinates = value;
					this.SendPropertyChanged("Coordinates");
					this.OnCoordinatesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uid", DbType="Int NOT NULL")]
		public int Uid
		{
			get
			{
				return this._Uid;
			}
			set
			{
				if ((this._Uid != value))
				{
					this.OnUidChanging(value);
					this.SendPropertyChanging();
					this._Uid = value;
					this.SendPropertyChanged("Uid");
					this.OnUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Map_Region", Storage="_Map", ThisKey="MapTypeId,MapVer", OtherKey="MapTypeId,Ver", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Map Map
		{
			get
			{
				return this._Map.Entity;
			}
			set
			{
				Map previousValue = this._Map.Entity;
				if (((previousValue != value) 
							|| (this._Map.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Map.Entity = null;
						previousValue.Regions.Remove(this);
					}
					this._Map.Entity = value;
					if ((value != null))
					{
						value.Regions.Add(this);
						this._MapTypeId = value.MapTypeId;
						this._MapVer = value.Ver;
					}
					else
					{
						this._MapTypeId = default(int);
						this._MapVer = default(int);
					}
					this.SendPropertyChanged("Map");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServiceCompany")]
	public partial class ServiceCompany : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Address;
		
		private string _Description;
		
		private string _ServiceEmail;
		
		private string _ContactPersonName;
		
		private string _ContactPersonEmail;
		
		private string _ContactPersonPhone;
		
		private EntitySet<IncidentReport> _IncidentReports;
		
		private EntitySet<MapType> _MapTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnServiceEmailChanging(string value);
    partial void OnServiceEmailChanged();
    partial void OnContactPersonNameChanging(string value);
    partial void OnContactPersonNameChanged();
    partial void OnContactPersonEmailChanging(string value);
    partial void OnContactPersonEmailChanged();
    partial void OnContactPersonPhoneChanging(string value);
    partial void OnContactPersonPhoneChanged();
    #endregion
		
		public ServiceCompany()
		{
			this._IncidentReports = new EntitySet<IncidentReport>(new Action<IncidentReport>(this.attach_IncidentReports), new Action<IncidentReport>(this.detach_IncidentReports));
			this._MapTypes = new EntitySet<MapType>(new Action<MapType>(this.attach_MapTypes), new Action<MapType>(this.detach_MapTypes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(255)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(2000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceEmail", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ServiceEmail
		{
			get
			{
				return this._ServiceEmail;
			}
			set
			{
				if ((this._ServiceEmail != value))
				{
					this.OnServiceEmailChanging(value);
					this.SendPropertyChanging();
					this._ServiceEmail = value;
					this.SendPropertyChanged("ServiceEmail");
					this.OnServiceEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactPersonName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ContactPersonName
		{
			get
			{
				return this._ContactPersonName;
			}
			set
			{
				if ((this._ContactPersonName != value))
				{
					this.OnContactPersonNameChanging(value);
					this.SendPropertyChanging();
					this._ContactPersonName = value;
					this.SendPropertyChanged("ContactPersonName");
					this.OnContactPersonNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactPersonEmail", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ContactPersonEmail
		{
			get
			{
				return this._ContactPersonEmail;
			}
			set
			{
				if ((this._ContactPersonEmail != value))
				{
					this.OnContactPersonEmailChanging(value);
					this.SendPropertyChanging();
					this._ContactPersonEmail = value;
					this.SendPropertyChanged("ContactPersonEmail");
					this.OnContactPersonEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactPersonPhone", DbType="NVarChar(30)")]
		public string ContactPersonPhone
		{
			get
			{
				return this._ContactPersonPhone;
			}
			set
			{
				if ((this._ContactPersonPhone != value))
				{
					this.OnContactPersonPhoneChanging(value);
					this.SendPropertyChanging();
					this._ContactPersonPhone = value;
					this.SendPropertyChanged("ContactPersonPhone");
					this.OnContactPersonPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceCompany_IncidentReport", Storage="_IncidentReports", ThisKey="Id", OtherKey="ServiceCompanyId")]
		public EntitySet<IncidentReport> IncidentReports
		{
			get
			{
				return this._IncidentReports;
			}
			set
			{
				this._IncidentReports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceCompany_MapType", Storage="_MapTypes", ThisKey="Id", OtherKey="ServiceCompanyId")]
		public EntitySet<MapType> MapTypes
		{
			get
			{
				return this._MapTypes;
			}
			set
			{
				this._MapTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IncidentReports(IncidentReport entity)
		{
			this.SendPropertyChanging();
			entity.ServiceCompany = this;
		}
		
		private void detach_IncidentReports(IncidentReport entity)
		{
			this.SendPropertyChanging();
			entity.ServiceCompany = null;
		}
		
		private void attach_MapTypes(MapType entity)
		{
			this.SendPropertyChanging();
			entity.ServiceCompany = this;
		}
		
		private void detach_MapTypes(MapType entity)
		{
			this.SendPropertyChanging();
			entity.ServiceCompany = null;
		}
	}
	
	public partial class GetRegionMapsResult
	{
		
		private int _Id;
		
		private int _ViewSettings;
		
		private System.Nullable<int> _Ver;
		
		public GetRegionMapsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL")]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ViewSettings", DbType="Int NOT NULL")]
		public int ViewSettings
		{
			get
			{
				return this._ViewSettings;
			}
			set
			{
				if ((this._ViewSettings != value))
				{
					this._ViewSettings = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ver", DbType="Int")]
		public System.Nullable<int> Ver
		{
			get
			{
				return this._Ver;
			}
			set
			{
				if ((this._Ver != value))
				{
					this._Ver = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
